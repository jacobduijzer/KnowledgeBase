name: Build and deploy (Core)
env:
  OUTPUT_FOLDER: .output
  SWA_NAME: 'swa-knowledgebase'
  
on:
  push:
  workflow_dispatch:
  
jobs:
  build_hugo:
    runs-on: ubuntu-latest
    environment: build
    steps:
      - uses: actions/checkout@v3

      - name: Get Hugo Version
        id: hugo-version
        run: |
          HUGO_VERSION=$(./hugo version | sed -r 's/^.*v([0-9]*\.[0-9]*\.[0-9]*).*/\1/')
          echo "::set-output name=HUGO_VERSION::${HUGO_VERSION}"
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: "${{ steps.hugo-version.outputs.HUGO_VERSION }}"
          extended: true

      - name: Build
        if: ${{ inputs.preview == false }}
        run: "hugo --minify --source ./knowledgebase --destination ${{ github.workspace }}/${{ env.OUTPUT_FOLDER }} --config config.toml"

      - name: Build (preview)
        if: ${{ inputs.preview == true }}
        run: hugo --minify --source ./knowledgebase --destination ${{ github.workspace }}/${{ env.OUTPUT_FOLDER }} --config config.toml --buildDrafts --buildFuture --baseURL '/'

      - name: Publish website output
        uses: actions/upload-artifact@v3
        with:
          name: website
          path: ${{ github.workspace }}/${{ env.OUTPUT_FOLDER }}

  provision:
    runs-on: ubuntu-latest
    environment: production
    name: Provision Azure
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Ensure resource group exists
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az group create -g ${{ secrets.RESOURCE_GROUP }} -l ${{ secrets.RESOURCE_GROUP_LOCATION }}
      - name: Deploy Bicep
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ secrets.RESOURCE_GROUP }}
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          template: ./infra/staticwebapp.bicep
          failOnStdErr: false
  
  deploy:
    needs: [provision]
    runs-on: ubuntu-latest
    environment: production
    name: Deploy SWA
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get SWA deployment token
        uses: azure/CLI@v1
        id: swa-token
        with:
          inlineScript: |
            SWA_DEPLOYMENT_TOKEN=$(az staticwebapp secrets list -n ${{ env.SWA_NAME }} -o tsv --query properties.apiKey)
            echo "::add-mask::$SWA_DEPLOYMENT_TOKEN"
            echo SWA_DEPLOYMENT_TOKEN=$SWA_DEPLOYMENT_TOKEN >> $GITHUB_ENV
      - name: Download website
        uses: actions/download-artifact@v1
        with:
          name: website
          path: ${{ github.workspace }}/${{ env.OUTPUT_FOLDER }}
      - name: Deploy frontend
        id: build-deploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ env.SWA_DEPLOYMENT_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          skip_app_build: true
          skip_api_build: true
          app_location: ${{ env.OUTPUT_FOLDER }}
